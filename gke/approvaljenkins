pipeline {
  agent none
   parameters {
    string(name: 'myVar', defaultValue: 'initial_value', description: 'query value')
  }
  
  stages {
  stage("Initialization") {
            steps {
                // use name of the patchset as the build name
                buildName "${GERRIT_CHANGE_SUBJECT}"
                buildDescription "Executed @ ${NODE_NAME}"
            }
        }
    stage('one') {
      steps {
        
        echo "1.1. ${myVar}" // prints '1.1. initial_value'
      }
    }
    stage('two') {
         when {
        expression { myVar == 'initial_value' }
      }
      steps {
        echo "2.1 ${myVar}" 
      }
    }
    stage('Wait for SRE Approval') {
         when {
        expression { myVar == 'initial_value' }
      }
            steps{
            script {
                    def deploymentDelay = input id: 'Deploy', message: 'choose env variable?', parameters: [choice(choices: ['dev', 'qa', 'prod'], description: 'which env do you want to deploy?', name: 'deploymentDelay')]
                }
                build job: 'dev', parameters: [string(name: 'myVar', value: 'initial')]
            }
        }
    // this stage is skipped due to the when expression, so nothing is printed
    stage('three') {
      when {
        expression { myVar != 'initial_value' }
      }
      steps {
        echo "2.2 ${myVar}" 
      }
    }
  }
   post {
        failure {
            // in case of failure, we'd like to have simple 'git blame' on build history :)
            currentBuild.displayName = 'This build needs help!!!'
            buildDescription("Committer: ${GERRIT_PATCHSET_UPLOADER_NAME}")
        }
    }
}
